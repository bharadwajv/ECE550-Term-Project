%%network contingency analysis%%
clear all;
clc;
%Existing State/Conditions%
Ybus;
zs=0.05j;

v=vsp;
del=bus_angle_rad;
%indicing the PV and PQ buses%
for i=1:length(bus(:,1))
    if bus(i,9) 
       pv(i)=i;
    end
end
for i=1:length(bus(:,1))
    if ~bus(i,9)
        pq(i)=i;
    end
end
pq=nonzeros(pq)';
pv=nonzeros(pv)';   

%ybus with the norton equivalent impendance consideration%
for i=1:length(pv)
    ybus(pv(i),pv(i))=ybus(pv(i),pv(i))+inv(zs);
end
% Req Variable definition%
Sg=zeros(length(bus(:,1)),1);
Sl=zeros(length(bus(:,1)),1);
Ig=zeros(length(bus(:,1)),1);
Il=zeros(length(bus(:,1)),1);

pg=zeros(length(bus(:,1)),1);
qg=zeros(length(bus(:,1)),1);
pl=zeros(length(bus(:,1)),1);
ql=zeros(length(bus(:,1)),1);

%Genreator voltage intitiation%
pg=bus(:,9)/Sb;
qg=bus(:,10)/Sb;

%Load Bus Initiation%
 pl=bus(:,7)/Sb;
 ql=bus(:,8)/Sb;



%% contingency screening%%
ybusn=ybus;
tot=1;
Iinj=zeros(length(bus(:,1)),1);
vn=zeros(length(bus(:,1)),1);
fid=fopen('output.m','w');
% Version 2.3 inclusion
% current injection calculation
for i=1:num_bus
    v_angle(i)=v(i)*(cos(del(i))+1j*sin(del(i)));
end
Iinj=ybus*v_angle.'; % Version 2.3 inclusion
while tot
    fprintf('\n ...Continegency Screening in progress...');
    
    fprintf('\n Provide the line outage Details');
    
    f=input('\n From bus number\n');
    if isempty(f)
        fprintf('\n kindly enter a valid bus number');
        f=input('\n From bus number\n');
    end

% Version 2.3 inclusion
    for i=1:length(brnch(:,1))
        if brnch(i,1)==f
            fprintf('\n bus %d is connected to %d',f,brnch(i,2));
        end
        if brnch(i,2)==f
            fprintf('\n bus %d is connected to %d',f,brnch(i,1));
        end
    end
    t=input('\n To bus number\n');
    if isempty(t)
        fprintf('\n kindly enter a valid bus number');
        t=input('\n To bus number\n');
    end
    clk=clock;
    
    %check connectivity%
    if abs(ybus(f,t))
        ybusn(f,t)=0;
        ybusn(t,f)=0;
        ybusn(f,f)=ybus(f,f)-inv(r(f,t)+x(f,t)*1i)-0.5*1j*b(f,t);
        ybusn(t,t)=ybus(t,t)-inv(r(t,f)+x(t,f)*1i)-0.5*1j*b(t,f);
    end
        for i=1:length(pv)
            Sg(pv(i))=pg(pv(i))+qg(pv(i))*1i;
        end
        for i=1:length(pq)
            Sl(pq(i))=pl(pq(i))+ql(pq(i))*1i;
        end
        

        Vnew=inv(ybusn)*Iinj;    % Version 2.3 inclusion    
        vn=Vnew;
        % Version 2.3 inclusion
        if det(ybusn)==0
            beep;
            fprintf('\n WARNING : COMPLETE SYSTEM BLACKOUT');
            fprintf('\n Critical Link:Bus %d to %d out!! \n',f,t);
        end
        fprintf('\n *=======Bus Information===*');
        fprintf('\n \t BUS | \t VOLTAGE/ANGLE');
        fprintf('\n *=========================*');
        for i=1:num_bus
            fprintf('\n * %2d \t | \t %2.4f / %3.4f \t *',B(i),abs(vn(i)),angle(vn(i)));
        end
        fprintf('\n *=========================*');
        if det(ybusn)==0            
            fprintf('\n WARNING : SYSTEM BLACKOUT');
            fprintf('\n Critical Link:Bus %d to %d out!!',f,t);
        end
        tot=input('\n Enter 0 to exit 1 to continue \n');
    
    if ~abs(ybus(f,t))
        fprintf('Sorry there exist no connection between bus %d and %d',f,t);
        tot=input('\n Enter 0 to exit 1 to continue \n');
    end
    
    
    % Version 2.3 inclusion
    if det(ybusn)==0      
       fprintf(fid,'\n WARNING : COMPLETE SYSTEM BLACKOUT');
       fprintf(fid,'\n Critical Link:Bus %d to %d out!! \n',f,t);
    end
    fprintf(fid,'\n CONTINGENCY SCREENING ANALYSIS REPORT \n');
    fprintf(fid,'\n LINE OUTAGE CONDITION BETWEEN BUS %d AND %d \n',f,t);
    if clk(4)<12
        fprintf(fid,'\n date: %d / %d / %d \t \t Time: %2d:%2d AM',clk(2),clk(3),clk(1),clk(4),clk(5));
    end
    if clk(4)>=12
        fprintf(fid,'\n date: %d / %d / %d \t \t Time: %2d:%2d PM',clk(2),clk(3),clk(1),clk(4),clk(5));
    end
        if abs(det(ybusn))
        fprintf(fid,'\n \n SYSTEM HEALTHINESS REPORT');    
        if min(abs(vn))>=0.95 && max(abs(vn))<=1.05       
                fprintf(fid,'\n There are no bus voltage violations.');
        end
        

            fprintf(fid,'\n ALERT: UNDERVOLTAGE CONDITION.  Following Buses are below voltage regulation limit.  ACTION NEEDED!');
            fprintf(fid,'\n *=====Bus Information=====*');
            fprintf(fid,'\n \t BUS | \t VOLTAGE');
            fprintf(fid,'\n *=========================*');
            for i= 1:length(vn)           
                if abs(vn(i))< 0.95
                    fprintf(fid,'\n * %2d \t | \t %2.4f \t *',B(i),abs(vn(i)));
                end
            end

        fprintf(fid,'\n *=========================* \n');     
     
            fprintf(fid,'\n ALERT: OVERVOLTAGE CONDITION.  Following Buses are above voltage regulation limit.  ACTION NEEDED!');
            fprintf(fid,'\n *=====Bus Information=====*');
            fprintf(fid,'\n \t BUS | \t VOLTAGE');
            fprintf(fid,'\n *=========================*');
            for i= 1:length(vn)
                if abs(vn(i))> 1.05
                    fprintf(fid,'\n * %2d \t | \t %2.4f \t *',B(i),abs(vn(i)));
                end                     
            end
        
        fprintf(fid,'\n *=========================* \n');
        
        ovrld=0;
        
        
        fprintf(fid,'\n ALERT: The line from following buses are OVERLOADED. ACTION NEEDED!');
        fprintf(fid,'\n *=========================*');
        for i=1:length(brnch(:,1))
            ax=brnch(i,1);
            bx=brnch(i,2);
            %METHOD 1
            %v=max(vn(a),vn(b));
            %curr=abs(abs(vn(a)-abs(vn(b))))*Y(a,b)+vn(a)*imag(Y(a,a))+imag(Y(b,b))*brnch(i,9);
            %Sab=v*conj(curr);
            %METHOD 2
            %Pab=vn(a)*(vn(a)*(real(brnch(i,9))+real(Y(a,b)))-vn(b)*(real(Y(a,b))*(cos(angle(vn(a))-angle(vn(b)))+imag(Y(a,b))*sin(angle(vn(a))-angle(vn(b))))));
            %Qab=vn(a)*(-vn(a)*(imag(brnch(i,9))+imag(Y(a,b)))-vn(b)*(real(Y(a,b))*(sin(angle(vn(a))-angle(vn(b)))+imag(Y(a,b))*cos(angle(vn(a))-angle(vn(b))))));
            %Sab=Pab+j*Qab;
            %METHOD 3
            Pab=abs(vn(ax))*(abs(vn(ax))*(real(0.5*b(ax,bx))+real(ybusn(ax,bx)))-(abs(vn(bx))*(real(ybusn(ax,bx))*cos(angle(vn(ax))-angle(vn(bx)))+imag(ybusn(ax,bx))*sin(angle(vn(ax))-angle(vn(bx))))));
            Qab=abs(vn(ax))*(-abs(vn(ax))*(imag(0.5*b(ax,bx))+imag(ybusn(ax,bx)))-(abs(vn(bx))*(real(ybusn(ax,bx))*sin(angle(vn(ax))-angle(vn(bx)))-imag(ybusn(ax,bx))*cos(angle(vn(ax))-angle(vn(bx))))));
            Sab=Pab+j*Qab;
            
            if (brnch(i,10))                
                if (abs(Sab) > brnch(i,11)) || (abs(Sab) > brnch(i,12))
                    fprintf(fid,'\n %d to %d',ax,bx);
                    ovrld=ovrld+1;
                end
            end
        end
        if ovrld==0
                fprintf(fid,'\n There are NO lines OVERLOADED.');
        end
            fprintf(fid,'\n *=========================* \n');
        end
    
    fprintf(fid,'\n OVERALL SYSTEM DATA');
    fprintf(fid,'\n *=======Bus Information=========*');
    fprintf(fid,'\n \t BUS | \t VOLTAGE/ANGLE');
    fprintf(fid,'\n *===============================*');
    for i=1:num_bus
        fprintf(fid,'\n * %2d \t | \t %2.4f / %3.4f \t *',B(i),abs(vn(i)),angle(vn(i)));
    end
    fprintf(fid,'\n *===============================* \n \n');
end
fclose(fid);
    