%%network contingency analysis%%
clear all;
clc;
%Existing State/Conditions%
Ybus;
zs=0.05j;

v=vsp;
del=bus_angle_rad;
%indicing the PV and PQ buses%
for i=1:length(bus(:,1))
    if bus(i,9) 
       pv(i)=i;
    end
end
for i=1:length(bus(:,1))
    if ~bus(i,9)
        pq(i)=i;
    end
end
pq=nonzeros(pq)';
pv=nonzeros(pv)';   

%ybus with the norton equivalent impendance consideration%
for i=1:length(pv)
    ybus(pv(i),pv(i))=ybus(pv(i),pv(i))+inv(zs);
end
% Req Variable definition%
Sg=zeros(length(bus(:,1)),1);
Sl=zeros(length(bus(:,1)),1);
Ig=zeros(length(bus(:,1)),1);
Il=zeros(length(bus(:,1)),1);
Ef=zeros(length(bus(:,1)),1);
I=zeros(length(bus(:,1)),1);



pg=zeros(length(bus(:,1)),1);
qg=zeros(length(bus(:,1)),1);
% pl=zeros(length(bus(:,1)),1);
% ql=zeros(length(bus(:,1)),1);

%Genreator voltage intitiation%
pg=bus(:,9)/Sb;
qg=bus(:,10)/Sb;

%Load Bus Initiation%
 pl=bus(:,7)/Sb;
 ql=bus(:,8)/Sb;

% for i=1:length(pv)
%     p(pv(i))=(bus(pv(i),9)-bus(pv(i),7))/Sb;
%     q(pv(i))=(bus(pv(i),10)-bus(pv(i),8))/Sb;
% end
% for i=1:length(pv)
%     for y=1:n
%             sigmap=v(pv(i))*v(y)*abs(ybus(pv(i),y))*cos(angle(ybus(pv(i),y))+del(y)-del((pv(i))));
%             sigmaq=-v(pv(i))*v(y)*abs(ybus(pv(i),y))*sin(angle(ybus(pv(i),y))+del(y)-del(pv(i)));
%             pg(pv(i))=pg(pv(i))+sigmap;
%             qg(pv(i))=qg(pv(i))+sigmaq;
%     end
% end
% for i=1:length(pq)
%     p(pq(i))=-bus(pq(i),7)/Sb;
%     q(pq(i))=-bus(pq(i),8)/Sb;
% end
% for i=1:length(pq)
%     for y=1:n
%             sigmap=v(pq(i))*v(y)*abs(ybus(pq(i),y))*cos(angle(ybus(pq(i),y))+del(y)-del(pq(i)));
%             sigmaq=-v(pq(i))*v(y)*abs(ybus(pq(i),y))*sin(angle(ybus(pq(i),y))+del(y)-del(pq(i)));
%             pl(pq(i))=pl(pq(i))+sigmap;
%             ql(pq(i))=ql(pq(i))+sigmaq;
%     end
% end
% 
% for i=1:length(pv)
%     Sg(pv(i))=abs(pg(pv(i))+qg(pv(i))*1i);
% end
% for i=1:length(pq)
%     Sl(pq(i))=abs(pl(pq(i))+ql(pq(i))*1i);
% end

% %current injection calculation%
% for i=1:length(pv)
%     Ig(pv(i))=conj((pg(pv(i))+qg(pv(i))*1i)/v(pv(i)));
% end
% for i=1:length(pq)
%     Il(pq(i))=-conj((pl(pq(i))+ql(pq(i))*1i)/v(pq(i)));
% end
% Iinj=[nonzeros(Ig);nonzeros(Il)];

%% contingency screening%%
ybusn=ybus;
tot=1;
e=1;
ind=0;
Iinj=zeros(length(bus(:,1)),1);
while tot
    fprintf('\n ...Continegency Screening in progress...');
    
    fprintf('\n Provide the line outage Details');
    f=input('\n From bus number\n');

% Version 2.3 inclusion
%     for i=1:length(brnch(:,1))
%         if brnch(i,1)==f
%             fprintf('\n bus %d is connected to %d',f,brnch(i,2));
%         end
%         if brnch(i,2)==f
%             fprintf('\n bus %d is connected to %d',f,brnch(i,1));
%         end
%     end
    t=input('\n To bus number\n');
    %check connectivity%
    if abs(ybus(f,t))
        ybusn(f,t)=0;
        ybusn(t,f)=0;
        ybusn(f,f)=ybus(f,f)-inv(r(f,t)+x(f,t)*1i)-0.5*b(f,t);
        ybusn(t,t)=ybus(t,t)-inv(r(t,f)+x(t,f)*1i)-0.5*b(t,f);
    %     while e>=0.01


        % Nodal analysis %
    %     for i=1:length(pv)
    %         for y=1:n
    %             sigmap=v(pv(i))*v(y)*abs(ybusn(pv(i),y))*cos(angle(ybusn(pv(i),y))+del(y)-del((pv(i))));
    %             sigmaq=-v(pv(i))*v(y)*abs(ybusn(pv(i),y))*sin(angle(ybusn(pv(i),y))+del(y)-del(pv(i)));
    %             pg(pv(i))=pg(pv(i))+sigmap;
    %             qg(pv(i))=qg(pv(i))+sigmaq;
    %         end
    %     end
    %     for i=1:length(pq)
    %         for y=1:n
    %             sigmap=v(pq(i))*v(y)*abs(ybusn(pq(i),y))*cos(angle(ybusn(pq(i),y))+del(y)-del(pq(i)));
    %             sigmaq=-v(pq(i))*v(y)*abs(ybusn(pq(i),y))*sin(angle(ybusn(pq(i),y))+del(y)-del(pq(i)));
    %             pl(pq(i))=pl(pq(i))+sigmap;
    %             ql(pq(i))=ql(pq(i))+sigmaq;
    %         end
    %     end

        for i=1:length(pv)
            Sg(pv(i))=pg(pv(i))+qg(pv(i))*1i;
        end
        for i=1:length(pq)
            Sl(pq(i))=pl(pq(i))+ql(pq(i))*1i;
        end
        %current injection calculation%
        for i=1:length(pv)
            Ig(pv(i))=conj(Sg(pv(i))/(v(pv(i))*(cos(del(pv(i)))+1i*sin(del(pv(i)))))); % Version 2.3 inclusion
        end
        for i=1:length(pv)
            Ef(pv(i))=(v(pv(i))*(cos(del(pv(i)))+1i*sin(del(pv(i)))))+zs*Ig(pv(i)); % Version 2.3 inclusion
        end
        for i=1:length(pv)
            I(pv(i))=Ef(pv(i))/zs;
        end
    %     for i=1:length(pv)
    %         for j= 1:n
    %             I(pv(i))=I(pv(i))+ybus(pv(i),j)*v(j)*(cos(del(j))+1j*sin(del(j)));
    %         end
    %     end
    %     for i=1:length(pq)
    %         for j= 1:n
    %             Il(pq(i))=Il(pq(i))+ybus(pq(i),j)*v(j)*(cos(del(j))+1j*sin(del(j)));
    %         end
    %     end
        for i=1:length(pq)
            Il(pq(i))=-conj(Sl(pq(i))/(v(pq(i))*(cos(del(pq(i)))+1i*sin(del(pq(i)))))); % Version 2.3 inclusion
        end
        for i=1:length(pv)
            Iinj(i)=I(pv(i));
        end
        for i=1:length(pq)
            Iinj(length(pv)+i)=Il(pq(i));
        end

        Vnew=inv(ybusn)*Iinj;    % Version 2.3 inclusion
    %     e=min(v-abs(Vnew));
    %     for i=1:length(pv)
    %         v(pv(i))=abs(Vnew(i));
    %         del(pv(i))=angle(Vnew(i));
    %     end
    %     for i=1:length(pq)
    %         v(pq(i))=abs(Vnew(length(pv)+i));
    %         del(pq(i))=angle(Vnew(length(pv)+i));
    %     end
    %     fprintf('ITERATION %f \n',ind);
        fprintf('\n');
        disp(Vnew);
    %     fprintf('\n');
    %     disp(del);
    %     ind=ind+1;
    %     end
        vn=[];
        for i=1:length(pv)
            vn(pv(i))=Vnew(i);
        end
        for i=1:length(pq)
            vn(pq(i))=Vnew(length(pv)+i);
        end
        disp(vn)
        fprintf('\n *=======Bus Information=========*');
        fprintf('\n \t BUS | \t VOLTAGE/ANGLE');
        fprintf('\n *===============================*');
        for i=1:num_bus
            fprintf('\n * %2d \t | \t %4.4f / %4.4f \t *',B(i),abs(vn(i)),angle(vn(i)));
        end
        fprintf('\n *===============================*');
        tot=input('\n Enter 0 to exit 1 to continue \n');
    end
    if ~abs(ybus(f,t))
        fprintf('Sorry there exist no connection between bus %d and %d',f,t);
        tot=input('\n Enter 0 to exit 1 to continue \n');
    end
end